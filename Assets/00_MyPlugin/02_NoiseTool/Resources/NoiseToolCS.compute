#pragma kernel NoiseToolCS_2D
#pragma kernel NoiseToolCS_3D
#pragma kernel Texture3DSlicer

RWTexture2D<float4> Result2D;
RWTexture3D<float4> Result3D;
float scale;
int Type = 0;
int size;

float setRange(float value, float low, float high){ return saturate((value-low)/(high-low)); }

float3 interpolationC2(float3 x){ return x*x*x*(x*(x*6.0 - 15.0) + 10.0);}

float3 voronoi_hash(float3 x, float s)
{
    x = (x+s) % s;
    x = float3(dot(x, float3(127.1, 311.7, 74.7)),
                dot(x, float3(269.5,183.3,246.1)),
                dot(x, float3(113.5,271.9,124.6)));
    return frac(sin(x) * 43758.5453123);
}

float Voronoi_Modified( in float3 p, float s, bool inverted)
{
    p *= s;
    p += 0.5;
    float3 pi = floor(p);
    float3 pf = frac(p);

    float id = 0.0;
    float m_Dist = 1.0;
    for(int k = -1; k <= 1; k++)
    {
        for(int j = -1; j <= 1; j++)
        {
            for(int i = -1; i <= 1; i++)
            {
                float3 n = float3(i,j,k);
                float d = distance(pf,n+voronoi_hash(pi+n, s));
                d = pow(d,2);

                if(d < m_Dist.x)
                {
                    m_Dist = d;
                }
            }
        }
    }
    
    float result = m_Dist;
    
    if(inverted)
        result = 1.0- result;

    return  result;
}

float Worley_FBM(float3 pixel, float size, float frequency, float amplitude, int layer)
{
    float3 xyz = pixel;
    float f = frequency;
    float a = amplitude;

    float value = 0.0;
    
    int i;
    for (i=0; i<layer; i++)
    {
        value += saturate(a * Voronoi_Modified(xyz, size*f, true));
        a *= 0.5;
        f*= 2.0;
    }
    
    return value;
}

float Worley3(float3 p, float s)
{
    
    float3 xyz = p;

    float val1 = Voronoi_Modified(xyz, 1.0 * s, true).r;
    float val2 = Voronoi_Modified(xyz, 2.0 * s, false).r;
    float val3 = Voronoi_Modified(xyz, 4.0 * s, false).r;

    val1 = saturate(val1);
    val2 = saturate(val2);
    val3 = saturate(val3);

    float worleyVal = val1;
    worleyVal = worleyVal - val2 * 0.3;
    worleyVal = worleyVal - val3 * 0.3;

    return worleyVal;		
}

void perlinHash(float3 gridcell, float s, bool tile,
                out float4 lowzHash0, out float4 lowzHash1, out float4 lowzHash2,
                out float4 highzHash0, out float4 highzHash1, out float4 highzHash2 )
{
    const float2 OFFSET = float2( 50.0, 161.0 );
    const float DOMAIN = 69.0;
    const float3 SOMELARGEFLOATS = float3(635.298681, 682.357502, 668.926525);
    const float3 ZINC = float3(48.500388, 65.294118, 63.934599);

    gridcell.xyz =  gridcell.xyz - floor(gridcell.xyz * (1.0 / DOMAIN)) * DOMAIN;
    float d = DOMAIN - 1.5;
    float3 gridcellInc1 = step(gridcell, float3(d,d,d)) * (gridcell + 1.0);

    gridcellInc1 = tile ? gridcellInc1 % s : gridcellInc1;

    float4 p = float4(gridcell.xy, gridcellInc1.xy) + OFFSET.xyxy;
    p *= p;
    p = p.xzxz * p.yyww;
    float3 lowzMod = float3(1.0 / (SOMELARGEFLOATS.xyz + gridcell.zzz * ZINC.xyz));
    float3 highzMod = float3(1.0 / (SOMELARGEFLOATS.xyz + gridcellInc1.zzz * ZINC.xyz));
    lowzHash0 = frac(p*lowzMod.xxxx);
    highzHash0 = frac(p*highzMod.xxxx);
    lowzHash1 = frac(p*lowzMod.yyyy);
    highzHash1 = frac(p*highzMod.yyyy);
    lowzHash2 = frac(p*lowzMod.zzzz);
    highzHash2 = frac(p*highzMod.zzzz);
}

float Perlin(float3 p, float s, bool tile)
{
    p *= s;

    float3 pI = floor(p);
    float3 pI2 = floor(p);
    float3 pF = p - pI;
    float3 pFMin1 = pF - 1.0;

    float4 hashx0, hashy0, hashz0, hashx1, hashy1, hashz1;
    perlinHash(pI2, s, tile, hashx0, hashy0, hashz0, hashx1, hashy1, hashz1);

    float4 gradx0 = hashx0 - 0.49999;
    float4 grady0 = hashy0 - 0.49999;
    float4 gradz0 = hashz0 - 0.49999;
    float4 gradx1 = hashx1 - 0.49999;
    float4 grady1 = hashy1 - 0.49999;
    float4 gradz1 = hashz1 - 0.49999;
    float4 gradResults0 = rsqrt(gradx0 * gradx0 + grady0 * grady0 + gradz0 * gradz0) * (float2(pF.x, pFMin1.x).xyxy * gradx0 + float2(pF.y, pFMin1.y).xxyy * grady0 + pF.zzzz * gradz0);
    float4 gradResults1 = rsqrt(gradx1 * gradx1 + grady1 * grady1 + gradz1 * gradz1) * (float2(pF.x, pFMin1.x).xyxy * gradx1 + float2(pF.y, pFMin1.y).xxyy * grady1 + pFMin1.zzzz * gradz1);

    float3 blend = interpolationC2(pF);
    float4 res0 = lerp(gradResults0, gradResults1, blend.z);
    float4 blend2 = float4(blend.xy, float2(1.0 - blend.xy));
    float final = dot(res0, blend2.zxzx * blend2.wwyy);
    final *= 1.0/sqrt(0.75);
    return ((final * 1.5) + 1.0) * 0.5;
}

float Perlin_FBM(float3 pixel, float size, float frequency, float amplitude, int layer)
{
    float3 xyz = pixel;
    float f = frequency;
    float a = amplitude;

    float value = 0.0;
    
    int i;
    for (i=0; i<layer; i++)
    {
        value += saturate(a * Perlin(xyz, size*f, true));
        a *= 0.5;
        f*= 2.0;
    }
    
    return value;
}

 float Perlin_7fbm(float3 p, float s)
{
    float f = 1;
    float a = 1.0;

    float val = Perlin_FBM(p,s,f,a,7);

    return val;
}

float dilatePerlinWorley(float p, float w, float x)
{
    float curve = 0.75;
    if(x < 0.5){
        x /= 0.5;
        float n = p + w * x;
        return n * lerp(1, 0.5, pow(x,curve));
    }
    else{
        x = (x-0.5)/0.5;
        float n = w + p *(1.0 - x);
        return n * lerp(0.5, 1.0, pow(x, 1.0/curve));
    }
}


[numthreads(8,8,1)]
void NoiseToolCS_2D(uint3 id : SV_DispatchThreadID)
{
    float4 FinalResult = float4(0,0,0,1);

    if (Type == 0)
    {
        float r = 0;
        float3 xyz = (float3)id.xyz/size;
        r = Perlin(xyz, scale,true);
        r = setRange(r,0,1.5);
        FinalResult = float4(r, r, r, 1);
    }
    else if (Type == 1)
    {
        float r = 0;
        float3 xyz = (float3)id.xyz/size;
        r = Voronoi_Modified(xyz,scale,true);
        FinalResult = float4(r, r, r, 1);
    }
    
    Result2D[id.xy] = FinalResult;
}

[numthreads(8,8,8)]
void NoiseToolCS_3D(uint3 id : SV_DispatchThreadID)
{
    float4 FinalResult = float4(0,0,0,1);
    
    if (Type == 0)
    {
        float3 xyz = (float3)id.xyz/size;
        float r = Perlin_7fbm(xyz, scale);
        r = setRange(r,0,1.5);
        FinalResult = float4(r,r,r,1);
    }
    else if (Type == 1)
    {
        float r = 0;
        float3 xyz = (float3)id.xyz/size;
        r = Voronoi_Modified(xyz,scale,true);
        FinalResult = float4(r,r,r,1);
    }
    else if (Type == 2)
    {
        float perlinToWorleyRatio = 0.2;

        float tex1RPerlinLow 	=  -0.2;
        float tex1RPerlinHigh 	=  1;
        float tex1RWorleyLow 	= 0;
        float tex1RWorleyHigh 	=  1.3;
        float tex1GBAWorleyLow	= -0.1;
        float tex1GBAWorleyHigh =  1.5;

        float3 xyz = (float3)id.xyz/size;

        float perlinR =Perlin_7fbm(xyz, 4.0);
        float worleyR = Worley3(xyz, 6.0);
        float worleyG = Worley3(xyz, 6.0);
        float worleyB = Worley3(xyz, 12.0);
        float worleyA = Worley3(xyz, 24.0);

        perlinR = setRange(perlinR, tex1RPerlinLow, tex1RPerlinHigh);
        worleyR = setRange(worleyR, tex1RWorleyLow, tex1RWorleyHigh);
        worleyG = setRange(worleyG, tex1GBAWorleyLow, tex1GBAWorleyHigh);
        worleyB = setRange(worleyB, tex1GBAWorleyLow, tex1GBAWorleyHigh);
        worleyA = setRange(worleyA, tex1GBAWorleyLow, tex1GBAWorleyHigh);

        float worleyPerlin = dilatePerlinWorley(perlinR, worleyR, perlinToWorleyRatio);
        worleyPerlin = saturate(worleyPerlin);
        
        FinalResult = float4(worleyPerlin,1.0-worleyG,1.0-worleyB,1.0-worleyA);
    }
    Result3D[id.xyz] = FinalResult;
}

Texture3D<float4> noise;
int layer;
[numthreads(32,32,1)]
void Texture3DSlicer (uint3 id : SV_DispatchThreadID)
{
    uint3 pos = uint3(id.x, id.y, layer);
    Result2D[id.xy] = noise[pos];
}
